{"version":3,"sources":["../../scripts/main.ts","../../scripts/scaler.ts","../../scripts/input.ts","../../scripts/output.ts","../../scripts/rod.ts","../../scripts/perfectRun.ts","../../scripts/playerFacing.ts","../../scripts/potion.ts","../../scripts/wand.ts","../../scripts/npcscriptEventHandler.ts"],"sourcesContent":["import { world, system, Player, BlockPermutation, Block, Entity, Scoreboard } from \"@minecraft/server\";\nimport { calculate } from \"./calculator\";\nimport { fraction1 } from \"./fraction\";\nimport { ratio1 } from \"./ratio\";\nimport { windowUndoHandler, windowScaleHandler } from \"./scaler\";\nimport { cuisenaire, getBlockBehind, resetGrid, giveRods, resetNPC, directionCheck } from \"./rod\";\nimport { cycleNumberBlock } from \"./output\";\nimport { facing } from \"./playerFacing\";\nimport { potionMaker, displayTimer, getSlots, giveIngredients } from \"./potion\";\nimport { giveWand } from \"./wand\";\nimport \"./npcscriptEventHandler\"; //handles the NPC script events\n\nlet overworld = world.getDimension(\"overworld\");\nlet potion: string = \"\";\nlet seconds: number = 0;\nlet currentPlayer = null;\nlet potionStart = 0;\nlet potionDrank = false;\nlet meters = 0;\nlet rodsToRemove: any[] = [];\n\n//welcome player\nworld.afterEvents.playerSpawn.subscribe((eventData) => {\n  currentPlayer = eventData.player;\n  let initialSpawn = eventData.initialSpawn;\n  if (initialSpawn) {\n    currentPlayer.sendMessage(`§3Welcome back ${currentPlayer.name}!`);\n    giveWand();\n  } else {\n    currentPlayer.sendMessage(`§3Welcome ${currentPlayer.name}!`);\n    giveWand();\n  }\n});\n\n//listens for the button push event.\nworld.afterEvents.buttonPush.subscribe(async (event) => {\n  switch (`${event.block.location.x},${event.block.location.y},${event.block.location.z}`) {\n    case \"29,97,106\": {\n      let player = event.source as Entity; // Cast event.source to Player type\n      rodsToRemove = []; //resets the rods to remove array\n      await resetNPC(13);\n      await giveRods();\n      await resetGrid({ x: 19, y: 95, z: 81 }); //top left corner of the area.\n      break;\n    }\n    case \"66,97,224\": {\n      overworld.runCommandAsync(`clear @p`)\n      await giveWand();\n      \n    }\n    case \"24,95,45\": {\n      let player = event.source as Entity; // Cast event.source to Player type\n      //await replayRods(player, perfectRun); // Pass the casted player as an argument\n      break;\n    }\n    case \"1,97,151\": {\n      overworld.runCommandAsync(`clear @p`)\n      overworld.runCommandAsync(`effect @p haste 9999 99 true`)\n      await giveWand();\n      await giveIngredients();\n    }\n  }\n});\n//listens for the block place event.\nworld.afterEvents.playerPlaceBlock.subscribe(async (event) => {\n  let block = event.block;\n  let player = event.player;\n  let colour = block.permutation?.getState(\"color\");\n  if (colour) {\n    //is it a rod block?\n    if (block.location.y === 95) {\n      //is it placed on the grid?\n      let viewDirection = event.player.getViewDirection();\n      let { direction, oppositeDirection } = await facing(viewDirection);\n      let correctDirection = await directionCheck(block.location.x, block.location.z, direction);\n      let hasColour = await getBlockBehind(event, oppositeDirection);\n      const rodPermutations = {\n        red: { block: \"red_concrete\", value: 2, message: \"1/12\" },\n        lime: { block: \"lime_concrete\", value: 3, message: \"1/8\" },\n        purple: { block: \"purple_concrete\", value: 4, message: \"1/6\" },\n        green: { block: \"green_concrete\", value: 6, message: \"1/4\" },\n        brown: { block: \"brown_concrete\", value: 8, message: \"1/3\" },\n        yellow: { block: \"yellow_concrete\", value: 12, message: \"1/2\" },\n        blue: { block: \"blue_concrete\", value: 24, message: \"1/1\" },\n      };\n\n      if (!hasColour) {\n        player.runCommandAsync(`title ${player.name} actionbar Place the rod in front of the magical connector.`);\n        event.block.setPermutation(BlockPermutation.resolve(\"tallgrass\"));\n        return;\n      }\n      if (!correctDirection) {\n        player.runCommandAsync(`title ${player.name} actionbar You're facing the wrong way.`);\n        event.block.setPermutation(BlockPermutation.resolve(\"tallgrass\"));\n        return;\n      }\n      const rod = rodPermutations[colour as keyof typeof rodPermutations];\n      if (rod) {\n        cuisenaire(block, rod.block, rod.value, rod.message, direction);\n      }\n    }\n  }\n});\n\n\nworld.beforeEvents.playerBreakBlock.subscribe(async (event) => {\n    let block = event.block;\n    if (block.permutation?.matches(\"hopper\")) {\n      event.cancel;\n      overworld.runCommandAsync(`kill @e[type=item]`)\n      let slots = await getSlots(event);\n      ({ potion, seconds } = await potionMaker(slots));\n    } \n}\n)\n\n//left click after break\nworld.afterEvents.playerBreakBlock.subscribe(async (clickEvent) => {\n  let hand_item = clickEvent.itemStackAfterBreak?.typeId; //gets the item in the players hand\n  let block = clickEvent.block;\n  let brokenBlock = clickEvent.brokenBlockPermutation;\n  if (hand_item === \"minecraft:stick\") {\n    if (brokenBlock.matches(\"blockbuilders:symbol_subtract\") && block.location.z === 225) {\n      // if it is the window vinculum run the undo function. \n      await windowUndoHandler(block.location);\n      block.setPermutation(BlockPermutation.resolve(\"blockbuilders:symbol_subtract\"));\n    } else if (block.location.x === 71 && block.location.y === 98 && block.location.z === 225 || block.location.x === 82 && block.location.y === 98 && block.location.z === 225) {\n      // if it is the window numerator cycle the number. \n      cycleNumberBlock(clickEvent);\n    } else {\n      //if it is anything else replace the block. \n      block.setPermutation(brokenBlock)\n    }\n  }\n});\n\n\n//right click\nworld.beforeEvents.itemUseOn.subscribe(async (event) => {\n    let block = event.block;\n    if (block.permutation?.matches(\"blockbuilders:symbol_subtract\")){\n      await windowScaleHandler(block.location);\n    }\n  }\n);\n\n//well\nfunction applyPotionEffect(player: any, potion: string, seconds: number) {\n  player.runCommand(\"scoreboard objectives setdisplay sidebar Depth\");\n  let tick = seconds * 20; //converts seconds to ticks\n  potionStart = system.currentTick;\n  switch (potion) {\n    case \"water_breathing\": {\n      player.addEffect(\"water_breathing\", tick);\n      break;\n    }\n    case \"night_vision\": {\n      player.addEffect(\"night_vision\", tick);\n      break;\n    }\n    case \"blindness\": {\n      player.addEffect(\"blindness\", tick);\n      break;\n    }\n    case \"poison\": {\n      player.addEffect(\"poison\", tick);\n      break;\n    }\n    case \"levitation\": {\n      player.addEffect(\"levitation\", tick);\n      break;\n    }\n  }\n  player.runCommand(\"clear @p minecraft:glass_bottle\");\n}\n\nfunction mainTick() {\n  world.getAllPlayers().forEach((player) => {\n    if (player.isInWater == true) {\n      player.runCommand(`scoreboard objectives setdisplay sidebar Depth`);\n      meters = 95 - Math.floor(player.location.y);\n      player.runCommand(`scoreboard players set Meters Depth ${meters}`);\n\n      if (potionDrank) {\n        //applies the potion effect once\n        applyPotionEffect(player, potion, seconds);\n        potionDrank = false;\n      }\n      if (player.getEffect(\"water_breathing\")) {\n        displayTimer(potionStart, seconds, player, \"Breathing underwater\");\n      } else if (player.getEffect(\"night_vision\")) {\n        displayTimer(potionStart, seconds, player, \"Great work you can see in the dark for\");\n      } else if (player.getEffect(\"blindness\")) {\n        displayTimer(potionStart, seconds, player, \"Oh no! The ratios were wrong, you can't see anything for\");\n      } else if (player.getEffect(\"levitation\")) {\n        displayTimer(potionStart, seconds, player, \"Oh no! You're floating for\");\n      }\n      if (player.isSneaking == true) {\n        surface(player);\n        //player.sendMessage(\"§fThat's poor form you can't try and sink faster, whatever happened to honour?\");\n      }\n    }\n  });\n  system.run(mainTick);\n}\nasync function surface(player: any) {\n  player.runCommandAsync(\"scoreboard objectives setdisplay sidebar\");\n  player.teleport({ x: -3, y: 96, z: 144 });\n  player.addEffect(\"instant_health\", 5);\n  player.removeEffect(\"blindness\");\n  player.removeEffect(\"night_vision\");\n  player.removeEffect(\"water_breathing\");\n}\n\n\n//listens for the potion to be fully drunk.\nworld.afterEvents.itemCompleteUse.subscribe(async (event) => {\n  let player = event.source;\n  if (event.itemStack?.typeId === \"minecraft:potion\") {\n    if (potion === \"poison\") {\n      player.sendMessage(\n        \"§fYou mixed the potion with the §2wrong ingredients. \\n§fIt has had no effect.\\nMake sure you're using the correct ingredients.\"\n      );\n    } else {\n      potionDrank = true;\n      player.sendMessage(\"§fYou drank the potion. \\n§2Jump in the well §fto see the effect.\");\n    }\n    event.source.runCommand(\"clear @p minecraft:glass_bottle\");\n  }\n});\n\n\n//listens for the entity health changed event so they don't drown.\nworld.afterEvents.entityHealthChanged.subscribe(async (event) => {\n  if (event.entity.typeId === \"minecraft:player\") {\n    let player: Player = event.entity as Player;\n    if (player.isInWater == true){\n      if (event.newValue === 18){\n        player.runCommandAsync(\"scoreboard objectives setdisplay sidebar\");\n        await surface(player);\n        player.sendMessage(`§fYou made it to a depth of: §2${meters} meters \\n§fOnly ${98 - meters} meters to the bottom. `);\n      }      \n    }\n  }\n});\n\nsystem.run(mainTick);\n","import { world } from \"@minecraft/server\";\nimport { getCube } from \"./input\";\nimport { setBlock } from \"./output\";\nimport { getInput } from \"./input\";\nimport { Vector3 } from \"@minecraft/server\";\n\nlet overworld = world.getDimension(\"overworld\");\n\n\nexport async function windowScaleHandler(location: Vector3) {\n  switch (true) {\n    case location.x === 71 && location.y === 97 && location.z === 225: {\n      await windowUndo({x: 67, y: 47, z: 218}, {x: 80, y: 82, z: 218}, {x: 67, y:97, z: 218});\n      scale({ x: 69, y: 98, z: 225 }, { x: 69, y: 102, z: 225 }, { x: 71, y: 98, z: 225 });\n      break;\n    }\n    case location.x === 82 && location.y === 97 && location.z === 225: {\n      await windowUndo({x: 75, y: 47, z: 218}, {x: 107, y: 66, z: 218}, {x: 75, y:97, z: 218});\n      scale({ x: 78, y: 97, z: 225 }, { x: 80, y: 100, z: 225 }, { x: 82, y: 98, z: 225 });\n      break;\n    }\n  }\n\n}\n\nexport async function windowUndoHandler(location: Vector3) {\n  giveGlass();\n  switch (true) {\n    case location.x === 71 && location.y === 97 && location.z === 225: {\n      await windowUndo({x: 67, y: 47, z: 218}, {x: 80, y: 82, z: 218}, {x: 67, y:97, z: 218});\n      break;\n    }\n    case location.x === 82 && location.y === 97 && location.z === 225: {\n      await windowUndo({x: 75, y: 47, z: 218}, {x: 107, y: 66, z: 218}, {x: 75, y:97, z: 218});\n      break;\n    }\n\n  }\n}\n\nexport function giveGlass(){\n  overworld.runCommand(\"replaceitem entity @p slot.hotbar 1 yellow_stained_glass 10\");\n  overworld.runCommand(\"replaceitem entity @p slot.hotbar 2 green_stained_glass 10\");\n  overworld.runCommand(\"replaceitem entity @p slot.hotbar 3 blue_stained_glass 10\");\n  overworld.runCommand(\"replaceitem entity @p slot.hotbar 4 purple_stained_glass 10\");\n  overworld.runCommand(\"replaceitem entity @p slot.hotbar 5 red_stained_glass 10\");\n  overworld.runCommand(\"replaceitem entity @p slot.hotbar 6 lime_stained_glass 10\");\n  overworld.runCommand(\"replaceitem entity @p slot.hotbar 7 black_stained_glass 10\");\n  overworld.runCommand(\"replaceitem entity @p slot.hotbar 8 brown_stained_glass 10\");\n}\n\nexport async function scale(cubePos1: Vector3, cubePos2: Vector3, inputNumber: Vector3) {\n  //if it doesn't work make sure pos1 is the bottom left corner and pos2 is the top right corner\n  const blocks = await getCube(cubePos1, cubePos2);\n  let shape = [];\n  let scaleFactor = getInput([inputNumber]);\n\n  for (const block of blocks) {\n      let colour = block.permutation?.getState(`color`)\n      if (colour) {\n        let location = { x: block.block?.x, y: block.block?.y, z: block.block?.z, colour: colour };\n        shape.push(location);\n      }\n    }\n  let scaledShape = await scaleShape(shape, scaleFactor, \"yx\");\n  for (const block of scaledShape) {\n    let offset_z = block.z - 7; //shifts the shape to the right\n    let offset_x = block.x;\n    let offset_y = block.y + 1;\n    setBlock({ x: offset_x, y: offset_y, z: offset_z }, block.colour + \"_stained_glass\");\n  }\n  }\n\nexport async function windowUndo(from: Vector3, to: Vector3, into: Vector3) {\n  await overworld.runCommandAsync(`clone ${from.x} ${from.y} ${from.z} ${to.x} ${to.y} ${to.z} ${into.x} ${into.y} ${into.z} replace`); //clones from below.\n  await overworld.runCommandAsync(`fill ${from.x} 116 ${from.z} ${to.x} 120 ${to.z} air replace`);\n  await overworld.runCommandAsync(`fill ${from.x} 120 ${from.z} ${to.x} 150 ${to.z} air replace`); //cleans any extra above \n  //cleans any extra above \n}\n\nexport async function scaleShape(shape: any, scaleFactor: any, axes: string) {\n  const scaledShape = [];\n  // Find the minimum coordinates to use as the base point of the shape\n  const basePoint = shape.reduce(\n    (min: any, block: any) => ({\n      x: Math.min(min.x, block.x),\n      y: Math.min(min.y, block.y),\n      z: Math.min(min.z, block.z),\n    }),\n    shape[0]\n  );\n\n  for (const block of shape) {\n    // Calculate the relative position of the block within the shape\n    const relativePos = {\n      x: block.x - basePoint.x,\n      y: block.y - basePoint.y,\n      z: block.z - basePoint.z,\n    };\n\n    // Scale the relative position\n    for (let i = axes.includes(\"x\") ? 0 : scaleFactor - 1; i < scaleFactor; i++) {\n      for (let j = axes.includes(\"y\") ? 0 : scaleFactor - 1; j < scaleFactor; j++) {\n        for (let k = axes.includes(\"z\") ? 0 : scaleFactor - 1; k < scaleFactor; k++) {\n          // Add the scaled relative position to the base point\n          const scaledBlock = {\n            x: basePoint.x + (axes.includes(\"x\") ? relativePos.x * scaleFactor + i : relativePos.x),\n            y: basePoint.y + (axes.includes(\"y\") ? relativePos.y * scaleFactor + j : relativePos.y),\n            z: basePoint.z + (axes.includes(\"z\") ? relativePos.z * scaleFactor + k : relativePos.z),\n            colour: block.colour,\n          };\n          scaledShape.push(scaledBlock);\n        }\n      }\n    }\n  }\n  return scaledShape;\n}\n","import { BlockPermutation, Vector3, world } from \"@minecraft/server\";\n\nlet overworld = world.getDimension(\"overworld\");\n\n//combines multiple digits into a single number\nexport function getInput(digits: Vector3[]): number {\n  let combinedString = \"\";\n  for (let digit of digits) {\n    let digitValue = getNumberValue(digit);\n    combinedString += digitValue;\n  }\n  let combinedNumber = parseInt(combinedString);\n  return combinedNumber;\n}\n\n//gets the block and permutation of a cuboid selection\n//if it doesn't work make sure pos1 is the bottom left corner and pos2 is the top right corner\nexport async function getCube(pos1: Vector3, pos2: Vector3) {\n  const blocks = [];\n  //world.sendMessage(\"pos1 = \" + pos1.x + \",\" + pos1.y + \",\" + pos1.z);\n  //world.sendMessage(\"pos2 = \" + pos2.x + \",\" + pos2.y + \",\" + pos2.z);\n  for (let x3 = pos1.x; x3 <= pos2.x; x3++) {\n    for (let y3 = pos1.y; y3 <= pos2.y; y3++) {\n      for (let z3 = pos1.z; z3 <= pos2.z; z3++) {\n        const location = { x: x3, y: y3, z: z3 };\n        const blockValue = getBlockValue(location);\n        blocks.push(blockValue);\n      }\n    }\n  }\n\n  return blocks;\n}\n\n//converts a block to a number value\nfunction getNumberValue(location: Vector3) {\n  let { block, permutation } = getBlockValue(location);\n  for (let i = 0; i < 10; i++) {\n    //check for element_0 to element_9\n    if (permutation?.matches(\"blockbuilders:number_\" + i)) {\n      return i;\n    }\n  }\n  block?.setPermutation(BlockPermutation.resolve(\"blockbuilders:number_0\")); //if no match is found, default to element_0\n  return 0; //if no match is found, return 0\n}\n\n//gets the block and permutation of a block at a specific location\nexport function getBlockValue(location: Vector3) {\n  const block = overworld.getBlock(location); //get the block at the location\n  const permutation = block?.permutation; //get the permutation of the block\n  return { block, permutation };\n}\n\n//gets the block and permutation of a block at a specific location\nexport async function getAsyncBlockValue(location: Vector3) {\n  const block = overworld.getBlock(location); //get the block at the location\n  const permutation = block?.permutation; //get the permutation of the block\n  return { block, permutation };\n}\n","import { BlockPermutation, Vector3, world } from \"@minecraft/server\";\nimport { getBlockValue } from \"./input\";\n\nconst overworld = world.getDimension(\"overworld\");\n//outputs the total to the screen\nexport function outputTotal(total: number, location: Vector3) {\n  let blockName = \"\";\n  let totalString = (\"\" + total).split(\"\").reverse().join(\"\"); //reverses the string so it can be read from right to left\n  for (let i = 0; i < totalString.length; i++) {\n    let { block, permutation } = getBlockValue(location);\n    if (totalString[i] === \".\") {\n      blockName = \"blockbuilders:symbol_decimalpoint\";\n    } else {\n      let digit = parseInt(totalString[i]);\n      blockName = \"blockbuilders:number_\" + digit;\n    }\n    block?.setPermutation(BlockPermutation.resolve(blockName));\n    location.x -= 1; \n  }\n}\n\nexport function setBlock(location: Vector3, blockName: string) {\n  let { block } = getBlockValue(location);\n  let isCopper = block?.permutation?.matches(\"waxed_weathered_copper\")\n  if(!isCopper){ //keeps the frame.\n    block?.setPermutation(BlockPermutation.resolve(blockName));\n  }\n}\n\nexport async function clearAnswer(start: Vector3, end: Vector3) {\n  overworld.runCommandAsync(`fill ${start.x} ${start.y} ${start.z} ${end.x} ${end.y} ${end.z} air replace`);\n}\nexport function cycleNumberBlock(clickEvent: any) {\n    for (let i = 0; i < 9; i++) {\n      //check for element_0 toplement_8\n      if (clickEvent.brokenBlockPermutation?.matches(\"blockbuilders:number_\" + i)) {\n        let nextNumber = i + 1;\n        let blockname = \"blockbuilders:number_\" + nextNumber;\n        clickEvent.block.setPermutation(BlockPermutation.resolve(blockname));\n      }\n      if (clickEvent.brokenBlockPermutation?.matches(\"blockbuilders:number_9\")) {\n        clickEvent.block.setPermutation(BlockPermutation.resolve(\"blockbuilders:number_0\"));\n      }\n    }\n}\n","import {\n  BlockPermutation,\n  world,\n  system,\n  Vector3,\n  Player,\n  EntityInventoryComponent,\n  EquipmentSlot,\n  EntityItemComponent,\n  PressurePlatePopAfterEvent,\n} from \"@minecraft/server\";\nimport { roundToDigits } from \"./numberHandler\";\nimport { perfectRun, validRanges, finalBlock, replaySettings } from \"./perfectRun\";\n\nlet overworld = world.getDimension(\"overworld\");\nlet rodsPlaced: any[] = [];\n\nexport async function directionCheck(x: number, z: number, direction: string) {\n  let correctDirection = false;\n  for (const range of validRanges) {\n    //world.sendMessage(`x: ${x} z: ${z}`);\n    if (\n      (range.x !== undefined && x === range.x && isInRange(z, range.zMin!, range.zMax!)) ||\n      (range.z !== undefined && z === range.z && isInRange(x, range.xMin!, range.xMax!))\n    ) {\n      correctDirection = true;\n      break;\n    }\n  }\n  return correctDirection;\n}\n\nfunction isInRange(value: number, min: any, max: any): boolean {\n  return value >= min && value <= max;\n}\n\nexport async function moveNPC(index:number){\n  overworld.runCommandAsync(`tp @e[type=npc,tag=npc${index}] 26 96 107`);\n  overworld.runCommandAsync('scoreboard players @p Students 1')\n}\n\nexport async function cuisenaire(\n  block: any,\n  blockName: string,\n  rodLength: number,\n  successMessage: string,\n  direction: string\n) {\n\n  if (block.permutation?.matches(blockName)) {\n    let runPlaceRods = true;\n    overworld.runCommand(`title @p actionbar ${successMessage} placed`);\n    block.setPermutation(BlockPermutation.resolve(\"tallgrass\"));\n    for (let i = 0; i < rodLength; i++) {\n      let colour = block[direction](i)?.permutation?.getState(\"color\");\n      if (colour || block[direction](i)?.permutation?.matches(\"sandstone\")) {\n        overworld.runCommand(\"title @p actionbar That rod is too long!\");\n        runPlaceRods = false;\n        break;\n      }\n    }\n    if (runPlaceRods) {\n      let rodToPlace = { location: block.location, direction: direction, rodLength: rodLength, blockName: blockName, successMessage: successMessage };\n      rodsPlaced.push(rodToPlace);\n      placeRods(block, blockName, rodLength, direction);\n      checkFinalBlock()\n    } else {\n      block?.setPermutation(BlockPermutation.resolve(\"tallgrass\"));\n    }\n  }\n}\n\nexport async function resetNPC(npcAmount: number) {\n  rodsPlaced = []; //resets the rods placed array.\n  for (let i = 0; i < npcAmount; i++) {\n    overworld.runCommandAsync(`dialogue change @e[tag=rodNpc${i}] rodNpc${i}Default`);\n  }\n}\n\nfunction placeRods(block: any, blockName: string, rodLength: number, direction: string) {\n  const validDirections = [\"east\", \"west\", \"north\", \"south\"];\n  if (validDirections.includes(direction)) {\n    for (let i = 0; i < rodLength; i++) {\n      block[direction](i).setPermutation(BlockPermutation.resolve(blockName))\n    }\n  } else {\n    throw new Error(`Invalid direction: ${direction}`);\n  }\n}\n\nasync function setCameraView(player: any, index: number) {\n  if (index == 0 || index == 1) {//room1\n    player.runCommandAsync(`camera ${player.name} set minecraft:free pos 30 120 92 facing 30 90 92`);\n  } else if (index == 2 || index == 3 || index == 4 ) {//room2\n    player.runCommandAsync(`camera ${player.name} set minecraft:free pos 55 120 92 facing 55 90 92`);\n  } else if (index == 5) {//room3\n    player.runCommandAsync(`camera ${player.name} set minecraft:free pos 93 120 92 facing 93 90 92`);\n    } else if (index == 6 || index == 7 || index == 8 || index == 9) {//room4\n    player.runCommandAsync(`camera ${player.name} set minecraft:free pos 105 120 92 facing 105 90 92`);\n  } else if (index == 10 || index == 11 || index == 12) {//room4\n    player.runCommandAsync(`camera ${player.name} set minecraft:free pos -39 120 44 facing -39 94 44`);\n  }\n}\n\nexport async function getBlockBehind(event: any, oppositeDirection: string) {\n  let hasColour = event.block[oppositeDirection](1)?.permutation?.getState(\"color\");\n  return hasColour;\n}\n\nasync function replayMessage(beginningMessage: string, fractions: any []) {\n  if (fractions){\n    if (fractions.length > 0) {\n      const playerPlacedFractions = fractions.filter(fraction => fraction !== undefined && fraction.startsWith(\"1\")); // filters out the fractions\n      const perfectRunFractions = fractions.filter(fraction => fraction !== undefined && !fraction.startsWith(\"1\")); //filters out the fractions\n      if (perfectRunFractions.length > 0) { //if you've reached the end of the list\n        const perfectRunFractionsSum = perfectRunFractions.join(\" + \");\n        overworld.runCommandAsync(`title @p actionbar ${perfectRunFractionsSum}`);\n      } else if (playerPlacedFractions.length > 0) { //else if there are fractions print them\n        const fractionsSum = playerPlacedFractions.join(\" + \");\n        overworld.runCommandAsync(`title @p actionbar ${beginningMessage} ${fractionsSum}`);\n      }\n    }\n  } else {\n    world.sendMessage(`Error: No fractions found`);\n  }\n}\n\nexport async function replay(index: number) {\n  giveRods();\n  overworld.runCommandAsync(`tp @p 31 96 116`); //moves the player out of frame.\n  let npcIndex = index;\n  let fractions: any[] = []\n  let combinedRods: any[] = [];\n  let replayConfig = replaySettings[index]; //stores all the replay settings for the different rods.\n  overworld.runCommandAsync(replayConfig.clearBlock);\n  overworld.runCommandAsync(replayConfig.replenishGrass);\n\n  if (replayConfig.cartesianDirection === 'x') {\n\n    let rodsPlacedToReplay = rodsPlaced.filter((rod) => rod.location && rod.location.x === replayConfig.cartesionValue);\n    rodsPlaced = rodsPlaced.filter((rod) => !(rod.location && rod.location.x === replayConfig.cartesionValue));\n    let perfectRunToReplay = perfectRun.filter((rod) => rod.location && rod.location.x === replayConfig.cartesionValue); //ISSUE appears to be here\n    //if (perfectRunToReplay.length > 1) {\n      //perfectRunToReplay = perfectRunToReplay.slice(0, -1); //gets the last one so you don't have a bunch of them appearing.\n    //}\n    combinedRods = rodsPlacedToReplay.concat(perfectRunToReplay);\n\n  } else if (replayConfig.cartesianDirection === 'z'){\n      let rodsPlacedToReplay = rodsPlaced.filter((rod) => rod.location && rod.location.z === replayConfig.cartesionValue);\n      rodsPlaced = rodsPlaced.filter((rod) => !(rod.location && rod.location.z === replayConfig.cartesionValue));\n      let perfectRunToReplay = perfectRun.filter((rod) => rod.location && rod.location.z === replayConfig.cartesionValue);\n      //if (perfectRunToReplay.length > 1) {\n        //perfectRunToReplay = perfectRunToReplay.slice(0, -1); //gets the last one so you don't have a bunch of them appearing.\n      //}\n      combinedRods = rodsPlacedToReplay.concat(perfectRunToReplay);\n  }\n  if (combinedRods.length > 0) {\n    for (let i = 0; i < combinedRods.length; i++)  {\n      ((index) => {\n        system.runTimeout(async () => {\n          let x = combinedRods[index].location.x;\n          world.getAllPlayers().forEach(async (player) => {\n            await setCameraView(player, npcIndex);\n            fractions.push(combinedRods[index].successMessage); \n            await replayMessage(replayConfig.beginningMessage, fractions);\n            let block = overworld.getBlock(combinedRods[index].location);\n            placeRods(block, combinedRods[index].blockName, combinedRods[index].rodLength, combinedRods[index].direction);\n            if (i === combinedRods.length - 1) {\n              //resets the camera 2 seconds after last rod placed.\n              endReplay(player, replayConfig.tpStart, replayConfig.clearBlock, replayConfig.replenishGrass, combinedRods);\n            }\n          });\n        }, 50 * index);\n        return;\n      })(i);\n  }\n}\n\n}\n\nfunction endReplay(player: any, tpStart: string, clearCommand: string, replenishGrass: string, combinedRods: any[]) {\n  system.runTimeout(() => {\n    player.runCommandAsync(tpStart);\n    player.runCommandAsync(clearCommand);\n    player.runCommandAsync(replenishGrass);\n    player.runCommandAsync(`camera ${player.name} clear`);\n    combinedRods = []; //clears the combined rods to stop looping values\n  }, 50);\n}\n\n//Resets the area to the original state, one area at a time.\nasync function squareReset(pos1: Vector3, pos2: Vector3, concreteColours: string[]) {\n  for (let i = 0; i < concreteColours.length; i++) {\n    let command = `fill ${pos1.x} ${pos1.y} ${pos1.z} ${pos2.x} ${pos2.y} ${pos2.z} tallgrass replace ${concreteColours[i]}_concrete`;\n    overworld.runCommand(command);\n  }\n  overworld.runCommandAsync(\n    `fill ${pos1.x} ${pos1.y - 1} ${pos1.z} ${pos2.x} ${pos2.y - 1} ${pos2.z} grass replace dirt`\n  );\n  overworld.runCommandAsync(`fill ${pos1.x} ${pos1.y} ${pos1.z} ${pos2.x} ${pos2.y} ${pos2.z} tallgrass replace air`);\n}\n\n//preps the grid coordinates for the squareReset function.\nexport async function resetGrid(location: Vector3) {\n  let concreteColours = [\"red\", \"green\", \"purple\", \"brown\", \"blue\", \"lime\", \"yellow\"]; // What rods will be replaced.\n  for (let i = 0; i < 4; i++) {\n    let offset_x = location.x + i * 25; // 25 is the distance between each starting point of the grid.\n    let pos1 = { x: offset_x, y: location.y, z: location.z };\n    let pos2 = { x: offset_x + 24, y: location.y, z: location.z + 24 };\n    await squareReset(pos1, pos2, concreteColours);\n  }\n}\n\nexport async function giveRods() {\n  let rods = [\n    { block: \"red_concrete\", amount: 2 },\n    { block: \"lime_concrete\", amount: 1 },\n    { block: \"purple_concrete\", amount: 2 },\n    { block: \"green_concrete\", amount: 2 },\n    { block: \"brown_concrete\", amount: 3 },\n    { block: \"yellow_concrete\", amount: 1 },\n    { block: \"blue_concrete\", amount: 2 },\n  ];\n  overworld.runCommandAsync(`clear @p`);\n  overworld.runCommandAsync(`gamemode adventure`);\n  for (let i = 0; i < rods.length; i++) {\n    overworld.runCommandAsync(\n      `give @p ${rods[i].block} ${rods[i].amount} 0 {\"minecraft:can_place_on\":{\"blocks\":[\"tallgrass\"]}}`\n    );\n  }\n}\n\nasync function checkFinalBlock(){\n  for (let i = 0; i < finalBlock.length; i++){\n    let rodEnd = overworld.getBlock(finalBlock[i].location);\n    let hasColour = rodEnd?.permutation?.getState(\"color\");\n    if (rodEnd?.permutation?.matches(finalBlock[i].blockName)){\n      changeNPC(i, true);\n    } else if (hasColour){\n      changeNPC(i, false);\n    } \n    }\n}\n\n \nasync function changeNPC(matchingRodIndex: number, win: boolean) {\n  //changes the NPC to the success state based on the matchingRodIndex in cuisenaire function.\n  if (win) {\n    overworld.runCommandAsync(`dialogue change @e[tag=rodNpc${matchingRodIndex}] rodNpc${matchingRodIndex}Win`);\n  } else {//changes the NPC\n    overworld.runCommandAsync(`dialogue change @e[tag=rodNpc${matchingRodIndex}] rodNpc${matchingRodIndex}Fail`);\n\n}\n} \n","//defines the perfect run for the Cuisneaire Rods game.\nexport const perfectRun = [\n  { location: { z: 104 ,y: 95, x: 30}, direction: \"north\", rodLength: 12, blockName: \"yellow_concrete\", successMessage: `Instead use a 1/2 rod as that is half of 24.`}, //1/2\n  { location: { z: 92, y: 95, x: 31 }, direction: \"east\", rodLength: 6, blockName: \"green_concrete\", successMessage: `For 1/4 of 24 use a 6 rod.` }, //1/4\n  { location: { z: 91, y: 95, x: 44 }, direction: \"east\", rodLength: 8, blockName: \"brown_concrete\", successMessage: `Use an 8 rod to make up a 1/3.` }, //1/3\n  { location: { z: 94, y: 95, x: 53 }, direction: \"south\", rodLength: 4, blockName: \"purple_concrete\", successMessage: `Four is a sixth of 24.` }, //1/6\n\n  { location: { z: 100, y: 95, x: 55 }, direction: \"east\", rodLength: 8, blockName: \"brown_concrete\", successMessage: `The most efficient way is to simplify 2/6 to 1/3.` }, //2/6\n\n  //{ location: { z: 99, y: 95, x: 69 }, direction: \"east\", rodLength: 24, blockName: \"blue_concrete\", successMessage: `The largest rod you have is a whole, so place two of them.` }, //1/1\n  { location: { z: 99, y: 95, x: 93 }, direction: \"east\", rodLength: 24, blockName: \"blue_concrete\", successMessage: `The largest rod you have is a whole, so place two of them.` }, //1/1\n  { location: { z: 95, y: 95, x: 115 }, direction: \"west\", rodLength: 3, blockName: \"lime_concrete\", successMessage: `Three is 1/8 of 24. ` }, //1/3\n  { location: { z: 94, y: 95, x: 109 }, direction: \"west\", rodLength: 6, blockName: \"green_concrete\", successMessage: `Simplify 2/8 to 1/4 to get the most efficient way across` }, //1/6\n  { location: { z: 92, y: 95, x: 99 }, direction: \"north\", rodLength: 2, blockName: \"red_concrete\", successMessage: `Two is 1/2 of 24.` }, //1/2\n  { location: { z: 89, y: 95, x: 97 }, direction: \"west\", rodLength: 4, blockName: \"purple_concrete\", successMessage: `Simplify 2/12 to get the most optimum route` }, //1/4\n  { location: { z: 89, y: 95, x: 92 }, direction: \"west\", rodLength: 2, blockName: \"red_concrete\", successMessage: `Two is 1/2 of 24.` }, //1/2\n  { location: { z: 89, y: 95, x: 87 }, direction: \"west\", rodLength: 8, blockName: \"brown_concrete\", successMessage: `Error this message shouldn't be able to be seen. It means the rod amounts are incorrect.` }, //1/3\n];\n\nexport const validRanges = [\n  { x: 30, zMin: 93, zMax: 104 },\n  { xMin: 31, xMax: 36, z: 92 },\n  { xMin: 44, xMax: 51, z: 91 },\n  { x: 53, zMin: 94, zMax: 97 },\n  { xMin: 55, xMax: 62, z: 100 },\n  { xMin: 69, xMax: 116, z: 99 },\n  { xMin: 113, xMax: 115, z: 95 },\n  { xMin: 101, xMax: 109, z: 94 },\n  { x: 99, zMin: 91, zMax: 92 },\n  { xMin: 94, xMax: 97, z: 89 },\n  { xMin: 91, xMax: 92, z: 89 },\n  { xMin: 80, xMax: 87, z: 89 },\n];\n\nexport const finalBlock = [\n  { location: { z: 93, y: 95, x: 30 }, blockName: \"yellow_concrete\" },\n  { location: { z: 92, y: 95, x: 36 }, blockName: \"green_concrete\" },\n  { location: { z: 91, y: 95, x: 51 }, blockName: \"brown_concrete\" },\n  { location: { z: 97, y: 95, x: 53 }, blockName: \"purple_concrete\" },\n  { location: { z: 100, y: 95, x: 62}, blockName: \"brown_concrete\" },\n  { location: { z: 99, y: 95, x: 92 }, blockName: \"blue_concrete\" },\n  { location: { z: 99, y: 95, x: 116 }, blockName: \"blue_concrete\" },\n  { location: { z: 95, y: 95, x: 113 }, blockName: \"lime_concrete\" },\n  { location: { z: 94, y: 95, x: 104 }, blockName: \"green_concrete\" },\n  { location: { z: 91, y: 95, x: 99 }, blockName: \"red_concrete\" },\n  { location: { z: 89, y: 95, x: 94 }, blockName: \"purple_concrete\" },\n  { location: { z: 89, y: 95, x: 91 }, blockName: \"red_concrete\" },\n  { location: { z: 89, y: 95, x: 80 }, blockName: \"brown_concrete\" },\n]\n\nexport const replaySettings = [\n  {\n    // Message to display at the beginning of the replay\n    beginningMessage: `To make 1/2 you placed: `,\n\n    // Command to teleport the player to the starting position of the last platform they were on and set their facing direction\n    tpStart: `tp @p 31 96 107 facing 31 96 100`,\n\n    // Command to clear the rods they just placed by replacing blocks with tallgrass\n    clearBlock: `fill 30 95 104 30 95 93 tallgrass replace`,\n\n    // Command to replenish the grass under the rods they just placed, same coordinates as above with y axis 94.\n    replenishGrass: `fill 30 94 104 30 94 93 grass_block replace`,\n\n    // Direction along which the rods are placed ('x' or 'z'). This will be the value that is always the same. \n    cartesianDirection: 'x',\n\n    // Specific value of the x or z that is the same on all the coordinates.\n    cartesionValue: 30\n  },\n  { beginningMessage: `To make 1/4 you placed: `, tpStart: `tp @p 30 96 92 facing 38 96 92`, clearBlock: `fill 31 95 92 36 95 92 tallgrass replace`, replenishGrass: `fill 31 94 92 36 94 92 grass_block replace`, cartesianDirection: 'z', cartesionValue: 92},\n  { beginningMessage: `To make 1/3 you placed: `, tpStart: `tp @p 41 96 91 facing 53 96 91`, clearBlock: `fill 51 95 91 44 95 91 tallgrass replace`, replenishGrass: `fill 51 94 91 44 94 91 grass_block replace`, cartesianDirection: 'z', cartesionValue: 91},\n  { beginningMessage: `To make 1/6 you placed: `, tpStart: `tp @p 53 96 92 facing 53 96 98`, clearBlock: `fill 53 95 94 53 95 97 tallgrass replace`, replenishGrass: `fill 53 94 94 53 94 97 grass_block replace`, cartesianDirection: 'x', cartesionValue: 53},\n  { beginningMessage: `To make 2/6 you placed: `, tpStart: `tp @p 54 96 99 facing 63 96 99`, clearBlock: `fill 55 95 100 62 95 100 tallgrass replace`, replenishGrass: `fill 55 94 100 62 94 100 grass_block replace`, cartesianDirection: 'z', cartesionValue: 100},\n  { beginningMessage: `To make 2/1 you placed: `, tpStart: `tp @p 67 96 99 facing 117 96 99`, clearBlock: `fill 69 95 99 116 95 99 tallgrass replace`, replenishGrass: `fill 69 94 99 116 94 99 grass_block replace`, cartesianDirection: 'z', cartesionValue: 99},\n  { beginningMessage: `To make 1/8 you placed: `, tpStart: `tp @p 117 96 95 facing 112 96 95`, clearBlock: `fill 115 95 95 113 95 95 tallgrass replace`, replenishGrass: `fill 115 94 95 113 94 95 grass_block replace`, cartesianDirection: 'z', cartesionValue: 95},\n  { beginningMessage: `To make 2/8 you placed: `, tpStart: `tp @p 111 96 94 facing 103 96 94`, clearBlock: `fill 109 95 94 104 95 94 tallgrass replace`, replenishGrass: `fill 109 94 94 104 94 94 grass_block replace`, cartesianDirection: 'z', cartesionValue: 94},\n  { beginningMessage: `To make 1/12 you placed: `, tpStart: `tp @p 99 96 94 facing 99 96 90`, clearBlock: `fill 99 95 92 99 95 91 tallgrass replace`, replenishGrass: `fill 99 94 92 99 94 91 grass_block replace`, cartesianDirection: 'x', cartesionValue: 99},\n  { beginningMessage: `To make 2/12 you placed: `, tpStart: `tp @p 99 96 89 facing 93 96 89`, clearBlock: `fill 97 95 89 94 95 89 tallgrass replace`, replenishGrass: `fill 97 94 89 94 94 89 grass_block replace`, cartesianDirection: 'z', cartesionValue: 89},\n  { beginningMessage: `To make 1/12 you placed: `, tpStart: `tp @p 93 96 88 facing 90 96 89`, clearBlock: `fill 92 95 89 91 95 89 tallgrass replace`, replenishGrass: `fill 92 94 89 91 94 89 grass_block replace`, cartesianDirection: 'z', cartesionValue: 89},\n  { beginningMessage: `To make 1/3 you placed: `, tpStart: `tp @p 89 96 89 facing 79 96 89`, clearBlock: `fill 87 95 89 80 95 89 tallgrass replace`, replenishGrass: `fill 87 94 89 80 94 89 grass_block replace`, cartesianDirection: 'z', cartesionValue: 89},\n]\n\n","import { Vector3 } from \"@minecraft/server\";\n\nexport async function facing(blockLocation: Vector3) {\n  const xDiff = Math.abs(blockLocation.x);\n  const zDiff = Math.abs(blockLocation.z);\n  \n  let direction;\n  \n  if (xDiff > zDiff) {\n    direction = blockLocation.x > 0 ? \"east\" : \"west\";\n  } else {\n    direction = blockLocation.z > 0 ? \"south\" : \"north\";\n  }\n\n  const oppositeDirections: { [key: string]: string } = {\n    \"east\": \"west\",\n    \"west\": \"east\",\n    \"south\": \"north\",\n    \"north\": \"south\"\n  };\n  let oppositeDirection = oppositeDirections[direction];\n\n  return {direction, oppositeDirection};\n}","import { BlockPermutation, BlockInventoryComponent, system, world } from \"@minecraft/server\";\nimport { getBlockValue } from \"./input\";\n\nlet overworld = world.getDimension(\"overworld\");\n\nexport async function getSlots(event: any) {\n  let hopper: BlockInventoryComponent | undefined = event.block.getComponent(\"inventory\");\n  let slots = [];\n  for (let i = 0; i <= 4; i++) {\n    let item = hopper?.container?.getItem(i);\n    slots.push({\n      slotNumber: i,\n      amount: item?.amount,\n      typeId: item?.typeId,\n    });\n  }\n  return slots;\n}\nasync function givePotion() {\n  world.getDimension(\"overworld\").runCommandAsync(`clear @p minecraft:potion`);\n  world.getDimension(\"overworld\").runCommandAsync(`give @p minecraft:potion 1`);\n}\nasync function calculateRatio(ingredients: any) {\n  let wrongIngredientsSight = ingredients.potato + ingredients.beetroot + ingredients.melon;\n  let wrongIngredientsDive = ingredients.apple + ingredients.carrot;\n  let appleRatio = ingredients.apple + ingredients.potato + ingredients.beetroot + ingredients.melon;\n  let carrotRatio = ingredients.carrot + ingredients.potato + ingredients.beetroot + ingredients.melon;\n  let potatoRatio = ingredients.potato + ingredients.apple + ingredients.carrot;\n  let beetrootRatio = ingredients.beetroot + ingredients.apple + ingredients.carrot;\n  let melonRatio = ingredients.melon + ingredients.apple + ingredients.carrot;\n  let total: number =\n    ingredients.apple + ingredients.carrot + ingredients.potato + ingredients.beetroot + ingredients.melon;\n  let nightVision: number = carrotRatio / appleRatio;\n  let beetrootMelonRatio: number = beetrootRatio / melonRatio;\n  let melonPotatoRatio: number = melonRatio / potatoRatio;\n\n  if (beetrootMelonRatio === 1.5 && melonPotatoRatio === 2) {\n    let potion = \"water_breathing\";\n    let seconds = Math.ceil(beetrootRatio + melonRatio + potatoRatio);\n    return { potion, seconds };\n  } else if (nightVision === 2) {\n    let potion = \"night_vision\";\n    let seconds = Math.ceil(ingredients.apple + ingredients.carrot);\n    return { potion, seconds };\n  } else if (wrongIngredientsSight === 0 && potatoRatio + carrotRatio > 0) {\n    let seconds = Math.ceil(potatoRatio + carrotRatio);\n    let potion = \"blindness\";\n    return { potion, seconds };\n  } else if (wrongIngredientsDive === 0 && beetrootRatio + melonRatio + potatoRatio > 0) {\n    let seconds = Math.ceil(beetrootRatio + melonRatio + potatoRatio);\n    let potion = \"levitation\";\n    return { potion, seconds };\n  } else if (total === 0) {\n    let seconds = 0;\n    let potion = \"empty\";\n    return { potion, seconds };\n  } else {\n    let seconds = Math.ceil((appleRatio + carrotRatio) / 10);\n    let potion = \"poison\";\n    return { potion, seconds };\n  }\n}\n\nasync function barChart(slots: any) {\n  let ingredients = {\n    apple: 0,\n    carrot: 0,\n    potato: 0,\n    beetroot: 0,\n    melon: 0,\n  };\n  for (let slot of slots) {\n    switch (slot.typeId) {\n      case \"minecraft:apple\": {\n        await setGlass(slot, \"red_stained_glass\");\n        await setItemFrame(0, slot.slotNumber);\n        ingredients.apple = (ingredients.apple || 0) + slot.amount;\n        break;\n      }\n      case \"minecraft:carrot\": {\n        await setGlass(slot, \"orange_stained_glass\");\n        await setItemFrame(1, slot.slotNumber);\n        ingredients.carrot = (ingredients.carrot || 0) + slot.amount;\n        break;\n      }\n      case \"minecraft:potato\": {\n        await setGlass(slot, \"yellow_stained_glass\");\n        await setItemFrame(2, slot.slotNumber);\n        ingredients.potato = (ingredients.potato || 0) + slot.amount;\n        break;\n      }\n      case \"minecraft:beetroot\": {\n        await setGlass(slot, \"purple_stained_glass\");\n        await setItemFrame(3, slot.slotNumber);\n        ingredients.beetroot = (ingredients.beetroot || 0) + slot.amount;\n        break;\n      }\n      case \"minecraft:melon_slice\": {\n        await setGlass(slot, \"green_stained_glass\");\n        await setItemFrame(4, slot.slotNumber);\n        ingredients.melon = (ingredients.melon || 0) + slot.amount;\n        break;\n      }\n      default: {\n        //empty\n        await setItemFrame(5, slot.slotNumber);\n        break;\n      }\n    }\n  }\n  return ingredients;\n}\nasync function setGlass(slot: any, blockName: string) {\n  let { block } = getBlockValue({ x: -12, y: 97, z: 145 });\n  block?.north(slot.slotNumber)?.setPermutation(BlockPermutation.resolve(blockName));\n  if (slot.amount > 10) {\n    slot.amount = 10;\n  }\n  for (let i = 0; i < slot.amount; i++) {\n    block?.above(i)?.north(slot.slotNumber)?.setPermutation(BlockPermutation.resolve(blockName));\n  }\n}\nasync function setItemFrame(offset_z: number, slotNumber: number) {\n  let cloneFrom = 145 - offset_z;\n  let cloneTo = 145 - slotNumber;\n  world\n    .getDimension(\"overworld\")\n    .runCommandAsync(`clone -11 109 ${cloneFrom} -11 109 ${cloneFrom} -11 97 ${cloneTo} replace`);\n}\n\nexport async function potionMaker(slots: any) {\n  await resetArea();\n  let ingredients = await barChart(slots);\n  let { potion, seconds } = await calculateRatio(ingredients);\n  if (potion !== \"empty\") {\n    await givePotion();\n  }\n  return { potion, seconds };\n}\n\nasync function resetArea() {\n  await world.getDimension(\"overworld\").runCommandAsync(\"fill -12 106 141 -12 96 145 black_stained_glass replace\");\n}\n\nexport async function giveIngredients(){\n    overworld.runCommand(\"replaceitem entity @p slot.hotbar 1 apple 10\");\n    overworld.runCommand(\"replaceitem entity @p slot.hotbar 2 carrot 10\");\n    overworld.runCommand(\"replaceitem entity @p slot.hotbar 3 beetroot 10\");\n    overworld.runCommand(\"replaceitem entity @p slot.hotbar 4 potato 10\");\n    overworld.runCommand(\"replaceitem entity @p slot.hotbar 5 melon_slice 10\");\n}\n\nexport function displayTimer(potionStart: number, seconds: number, player: any, potionDescription: string) {\n  let timeLeft = (potionStart + seconds * 20 - system.currentTick)/20;\n  if (timeLeft % 1 === 0 ){\n            player.onScreenDisplay.setActionBar(`Time left:\\n ${potionDescription} ${timeLeft} seconds`);\n          }\n}; \n","\nimport { world } from \"@minecraft/server\"\n\nlet overworld = world.getDimension(\"overworld\")\n\nexport async function giveWand(){\n    overworld.runCommandAsync(`give @p[hasitem={item=stick,quantity=0}] minecraft:stick 1 0 {\"item_lock\": { \"mode\": \"lock_in_slot\" }, \"minecraft:can_destroy\":{\"blocks\":[\"minecraft:hopper\", \"blockbuilders:number_0\",\"blockbuilders:number_1\",\"blockbuilders:number_2\",\"blockbuilders:number_3\",\"blockbuilders:number_4\",\"blockbuilders:number_5\",\"blockbuilders:number_6\",\"blockbuilders:number_7\",\"blockbuilders:number_8\",\"blockbuilders:number_9\",\"blockbuilders:symbol_subtract\"]}}`)\n}\n\n\n","\nimport { system, world } from \"@minecraft/server\";\nimport { replay } from \"./rod\"; \nimport { perfectRun } from \"./perfectRun\";\n\n//handles the scriptEventReceive from NPCs\nsystem.afterEvents.scriptEventReceive.subscribe((event) => {\n    switch (event.id) {\n      case \"rod:npcReplay\": {\n        world.sendMessage(`Replay Version ${event.message}`);\n        replay(parseInt(event.message));\n        break;\n      }\n      case \"rod:npcComplete\": {\n        world.sendMessage(`Complete Version ${event.message}`);\n        break;\n      }\n    }\n  });\n  \n"],"mappings":"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","names":["world","system","BlockPermutation","world","BlockPermutation","world","overworld","world","BlockPermutation","BlockPermutation","overworld","world","BlockPermutation","world","overworld","world","overworld","BlockPermutation","world","index","BlockPermutation","system","world","overworld","world","potion","seconds","BlockPermutation","potionStart","system","world","overworld","system","world","system","world","overworld","world","BlockPermutation","potion","seconds","system"],"file":"../scripts/main.js"}