{"version":3,"sources":["../../scripts/main.ts","../../scripts/input.ts","../../scripts/calculator.ts","../../scripts/output.ts","../../scripts/numberHandler.ts","../../scripts/fraction.ts"],"sourcesContent":["import { world } from \"@minecraft/server\";\nimport { calculate } from \"./calculator\";\nimport { fraction1 } from \"./fraction\";\n\n\nconst overworld = world.getDimension(\"overworld\");\n\nworld.afterEvents.buttonPush.subscribe(async(event) => {\n  //tests for the location of the button and runs the correct function.\n  switch (`${event.block.location.x},${event.block.location.y},${event.block.location.z}`) {\n    case \"-11,-60,94\": {\n      calculate();\n      break;\n    }\n    case \"-27,-60,94\": {\n      fraction1();\n      break;\n    }\n  }\n});","import { BlockPermutation, Vector3, world } from \"@minecraft/server\";\n\nlet overworld = world.getDimension(\"overworld\");\n\n//combines 3 digits into a single number\nexport function getInput(digits: Vector3[]): number {\n    let combinedString = '';\n    for (let digit of digits) {\n        let digitValue = getNumberValue(digit);\n        combinedString += digitValue;\n    }\n    let combinedNumber = parseInt(combinedString);\n    return combinedNumber;\n}\n  \n//converts a block to a number value\nfunction getNumberValue(location: Vector3) {\n    let {block, permutation} = getBlockValue(location);\n    for (let i = 0; i < 10; i++) {//check for element_0 to element_9\n        if (permutation?.matches(\"element_\" + i)) {\n          return i;\n        }\n      }\n      block?.setPermutation(BlockPermutation.resolve(\"element_0\")); //if no match is found, default to element_0\n      return 0; //if no match is found, return 0\n    }\n\n//gets the block and permutation of a block at a specific location\nexport function getBlockValue(location: Vector3) {\n    const block = overworld.getBlock(location); //get the block at the location\n    const permutation = block?.permutation; //get the permutation of the block\n    return {block, permutation};\n  }\n  ","import { getBlockValue } from \"./input\";\nimport { world } from \"@minecraft/server\";\nimport { getInput } from \"./input\";\nimport { outputTotal, clearAnswer } from \"./output\";\nimport { roundToDigits } from \"./numberHandler\";\n\n//calculates the total based on the block in the center\nfunction calculateTotal(leftvalue: number, rightvalue: number){\n    let {block, permutation} = getBlockValue({x: -11, y: -59, z: 93});\n    world.sendMessage(\"The sum is:\")\n    if (permutation?.matches(\"cut_copper\")) {\n      world.sendMessage(leftvalue + \"+\" + rightvalue)\n      let total = leftvalue + rightvalue;\n      return total;\n    }\n    else if (permutation?.matches(\"raw_gold_block\")) {\n      world.sendMessage(leftvalue + \"-\" + rightvalue)\n      let total = leftvalue - rightvalue;\n      return total;\n    }\n    else if (permutation?.matches(\"gold_block\")) {\n      world.sendMessage(leftvalue + \"*\" + rightvalue)\n      let total = leftvalue * rightvalue;\n      return total;\n    }\n    else if (permutation?.matches(\"cobblestone\")) { \n      world.sendMessage(leftvalue + \"/\" + rightvalue)\n      let total = leftvalue / rightvalue;\n      return total;\n    }\n    else {\n      world.sendMessage(\"Add a +, -, *, or / block to the center to perform an operation.\");\n    }\n  }\nexport async function calculate(){\n  await clearAnswer({x: -14, y: -57, z: 93}, {x: -8, y: -57, z: 93})\n  let leftInput = getInput([{x: -14, y: -59, z: 93}, {x: -13, y: -59, z: 93}, {x: -12, y: -59, z: 93}]);\n  let rightInput = getInput([{x: -10, y: -59, z: 93}, {x: -9, y: -59, z: 93}, {x: -8, y: -59, z: 93}]);\n  let total = calculateTotal(leftInput, rightInput);\n  if (total !== null && total !== undefined) {\n    let roundedTotal = roundToDigits(total, 6);\n    outputTotal(roundedTotal, {x: -8, y: -57, z: 93});\n    world.sendMessage(\"The total is:\");\n    if (roundedTotal === total){\n      world.sendMessage(`${total}.`);\n    }\n    else {\n      world.sendMessage(`${total} and has been rounded to ${roundedTotal}.`);\n    }\n  }\n  else {\n    world.sendMessage(\"Please input a number.\");\n  }\n}","import { BlockPermutation, Vector3, world} from \"@minecraft/server\";\nimport { getBlockValue } from \"./input\";\n\nconst overworld = world.getDimension(\"overworld\");\n//outputs the total to the screen\nexport function outputTotal(total: number, location: Vector3){\n    let blockName = \"\";\n    let totalString = ('' + total).split('').reverse().join(''); //reverses the string so it can be read from right to left\n    for (let i = 0; i < totalString.length; i++){\n      let {block, permutation} = getBlockValue(location);\n      if (totalString[i] === '.') {\n        blockName = \"anvil\";\n      } else {\n        let digit = parseInt(totalString[i]);\n        blockName = \"element_\" + digit;\n      }\n      block?.setPermutation(BlockPermutation.resolve(blockName));\n      location.x -= 1;\n    }\n  }\n\n  export async function clearAnswer(start: Vector3, end: Vector3) {\n    overworld.runCommandAsync(`fill ${start.x} ${start.y} ${start.z} ${end.x} ${end.y} ${end.z} air replace`);\n  }","export function roundToDigits(num: number, digits: number) {\n    let numStr = num.toString();\n    if (numStr.length > digits) {\n        if (numStr.includes('.')) {\n            let [whole, decimal] = numStr.split('.');\n            if (whole.length >= digits) {\n                return parseFloat(whole.slice(0, digits));\n            } else {\n                let decimalDigits = digits - whole.length;\n                return parseFloat(num.toFixed(decimalDigits));\n            }\n        } else {\n            return parseFloat(numStr.slice(0, digits));\n        }\n    } else {\n        return num;\n    }\n  }","import { world } from \"@minecraft/server\";\nimport { getInput } from \"./input\";\nimport { outputTotal, clearAnswer } from \"./output\";\nimport { roundToDigits } from \"./numberHandler\";\n\n//calculates the fraction of a number\nexport async function fraction1(){\n    await clearAnswer({x: -26, y: -59, z: 93}, {x: -23, y: -59, z: 93});\n    let numerator = getInput([{x: -28, y: -57, z: 93}]);\n    let denominator = getInput([{x: -28, y: -59, z: 93}]);\n    let input = getInput([{x: -26, y: -57, z: 93}, {x: -25, y: -57, z: 93}, {x: -24, y: -57, z: 93}]);\n    world.sendMessage(\"The fraction is:\");\n    world.sendMessage(numerator + \"/\" + denominator + \" of \" + input);\n    let fraction = calculateFraction(numerator, denominator);\n    let result = fraction * input;\n    world.sendMessage(\"The Output is:\");\n    let roundedFraction = roundToDigits(result, 3);\n    if (result === roundedFraction) {\n        world.sendMessage('' + roundedFraction);\n    }\n    else {\n        world.sendMessage('' + result + \" which has been rounded to \" + roundedFraction);\n    }\n    outputTotal(roundedFraction, {x: -23, y: -59, z: 93});\n}\n\nfunction calculateFraction(numerator: number, denominator: number): number {\n    if (denominator === 0) {\n        world.sendMessage(\"The denominator cannot be 0. Please input a different number.\")\n    }\n    return numerator / denominator;\n}"],"mappings":"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","names":["world","world","BlockPermutation","world","overworld","world","BlockPermutation","world","world","world","overworld","world"],"file":"../scripts/main.js"}